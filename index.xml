<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Notes</title>
		<link>https://prabowo02.github.io/</link>
		<description>Recent content on Notes</description>
		<generator>Hugo 0.60.0 -- gohugo.io</generator>
		<language>en-us</language>
		<lastBuildDate>Sun, 22 Dec 2019 14:00:39 +0800</lastBuildDate>
		<atom:link href="https://prabowo02.github.io/index.xml" rel="self" type="application/rss+xml" />
		<item>
			<title>On Prime Counting in Sublinear Time</title>
			<link>https://prabowo02.github.io/posts/prime-counting/</link>
			<pubDate>Sun, 22 Dec 2019 14:00:39 +0800</pubDate>
			<guid isPermaLink="true">https://prabowo02.github.io/posts/prime-counting/</guid>
			<description>&lt;p&gt;We are to count how many prime numbers are there up to $N$ ($N \leq 10^{11}$).&lt;/p&gt;
&lt;h2 id=&#34;computation&#34;&gt;Computation&lt;/h2&gt;
&lt;p&gt;Let $\pi(N)$ be the number of primes up to $N$, and $f(n, p)$ be the number of integers $x$, for $2 \leq x \leq N$, such that it contains no prime factor $&amp;lt; p$.&lt;/p&gt;
&lt;p&gt;If $p$ is not prime, then $f(n, p) = f(n, p-1)$. Otherwise:&lt;/p&gt;
&lt;p&gt;\begin{align}
f(n, p) = f(n, p-1) - \left(f\Big(\big\lfloor\frac{n}{p} \big\rfloor, p-1\Big) - \pi(p-1)\right)
\tag{1}
\end{align}&lt;/p&gt;
&lt;p&gt;The value $f(\lfloor\frac{n}{p} \rfloor, p-1) - \pi(p-1)$ gives the number of integer $\leq N$ that has $p$ as its prime factor but no prime factor $&amp;lt; p$. In other words, it is subtracting $|\{pk | 1 \leq k \leq n/p, \forall_{\text{prime }q  &amp;lt; p} q \nmid k \}|$ from $f(n, p-1)$.&lt;/p&gt;
&lt;p&gt;Our goal is to compute $\pi(N) = f(N, \sqrt N)$.&lt;/p&gt;
&lt;h3 id=&#34;implementation&#34;&gt;Implementation&lt;/h3&gt;
&lt;p&gt;The idea is similar to the standard prime sieving: eliminate all numbers that is multiple of $2, 3, 5, \ldots, \sqrt N$.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Denote &lt;code&gt;dp[n]&lt;/code&gt; as an array to store the number of primes up to $n$, and initiate the array &lt;code&gt;dp[n]&lt;/code&gt; $= f(n, 1) = n-1$ for all unique values of $\lfloor \frac{N}{i} \rfloor$ (there are $O(\sqrt N) $such values).&lt;/li&gt;
&lt;li&gt;For every prime $p$ in the range $[2, N]$, update &lt;code&gt;dp[n] -= dp[n/p] - dp[p-1]&lt;/code&gt;, for all unique values of $n = \lfloor \frac{N}{i} \rfloor$ and $n \geq p^2$.
&lt;ul&gt;
&lt;li&gt;This is because when iterating prime $p$, all values of &lt;code&gt;dp[n]&lt;/code&gt; is storing $f(n, p-1)$. In particular, for $n &amp;lt; p^2$, it is already storing the number of primes up to &lt;code&gt;n&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Therefore, the operation &lt;code&gt;dp[n] -= dp[n/p] - dp[p-1]&lt;/code&gt; is actually performing the equation from $(1)$.&lt;/li&gt;
&lt;li&gt;By the end of this iteration, &lt;code&gt;dp[n]&lt;/code&gt; will store $f(n, p)$.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Return &lt;code&gt;dp[N]&lt;/code&gt; as our answer.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;pseudo-code&#34;&gt;Pseudo Code&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;primeCounting&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; N) {
  Ni &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sort_descending(unique([N&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;i &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i in [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; .. N]]))
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (n: Ni) {
    dp[n] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
  }

  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;; p&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;p &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; N; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;p) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (dp[p] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dp[p&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// p is not a prime
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (n: Ni) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;i) &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
      dp[n] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dp[n&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;p] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; dp[p];
    }
  }

  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; dp[N];
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;complexity&#34;&gt;Complexity&lt;/h3&gt;
&lt;p&gt;It can be seen that the transition operation of $(1)$ is $O(1)$. Therefore, we just need to compute the space of $f(n, p)$.&lt;/p&gt;
&lt;p&gt;There are two cases:&lt;/p&gt;
&lt;h4 id=&#34;case-1-n-leq-sqrt-n&#34;&gt;Case 1: $n \leq \sqrt N$&lt;/h4&gt;
&lt;p&gt;All values of $n \leq \sqrt N$ exists in the set $\{ \lfloor \frac{N}{i} \rfloor \}$, and for each $n$, only $p^2 \leq n$ will be considered.&lt;/p&gt;
&lt;p&gt;Therefore the overall time complexity for this case:&lt;/p&gt;
&lt;p&gt;$$ \sum_{i=1}^{\sqrt N} \sqrt i = O\left( \int_1^{\sqrt N} \sqrt x \, dx \right) = O(N^{3/4})$$&lt;/p&gt;
&lt;h4 id=&#34;case-2-n--sqrt-n&#34;&gt;Case 2: $n &amp;gt; \sqrt N$&lt;/h4&gt;
&lt;p&gt;The values of $n$ in this case is $\frac{N}{1}, \frac{N}{2}, \ldots, \frac{N}{\sqrt N}$. Since every $n$ needs to consider all $p^2 \leq n$, the time complexity for this case is:&lt;/p&gt;
&lt;p&gt;$$ \sum_{i=1}^{\sqrt N} \sqrt{\frac{N}{i}} = O\left(\sqrt N \int_1^{\sqrt N} \frac{1}{\sqrt x} \, dx \right) = O(N^{3/4})$$&lt;/p&gt;
&lt;h4 id=&#34;total-complexity&#34;&gt;Total Complexity&lt;/h4&gt;
&lt;p&gt;Since the complexity for both cases are the same, the total complexity is $O(N^{3/4})$&lt;/p&gt;
&lt;h2 id=&#34;remarks&#34;&gt;Remarks&lt;/h2&gt;
&lt;h3 id=&#34;speeding-up-computation&#34;&gt;Speeding Up Computation&lt;/h3&gt;
&lt;p&gt;It seems that we can speed up the computation by precomputing the first few prime numbers using the standard sieve of eratosthenes. Precompute the first $f(n, p)$ for $n \leq N^{2/3}$, then for the rest of the $n$, use the same iteration as above. This should run in a little more than $O(N^{2/3})$.&lt;/p&gt;
&lt;h3 id=&#34;other-usages&#34;&gt;Other Usages&lt;/h3&gt;
&lt;p&gt;With a few tweaks, we can compute the following with the same method:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sum of prime up to $n$.&lt;/li&gt;
&lt;li&gt;Sum of prime of the form $4k + 1$ up to $n$.&lt;/li&gt;
&lt;li&gt;Totient summatory function up to $n$.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Looks like it is also possible to further generalize this method using the Dirichlet Hyperbola method.&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Prime-counting_function#The_Meissel%E2%80%93Lehmer_algorithm&#34;&gt;The Meissel-Lehmer algorithm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://math.stackexchange.com/questions/316376/how-to-calculate-these-totient-summation-sums-efficiently&#34;&gt;Efficient Totient Summatory Function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://math.stackexchange.com/questions/1378286/find-the-sum-of-all-primes-smaller-than-a-big-number&#34;&gt;Sum of primes smaller than a big number&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Dirichlet_hyperbola_method&#34;&gt;Dirichlet Hyperbola Method&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
		</item>
		<item>
			<title>Binomial Modulo Prime Power</title>
			<link>https://prabowo02.github.io/posts/binomial-mod-pe/</link>
			<pubDate>Wed, 04 Dec 2019 16:03:30 +0800</pubDate>
			<guid isPermaLink="true">https://prabowo02.github.io/posts/binomial-mod-pe/</guid>
			<description>&lt;p&gt;This is an attempt to translate &lt;a href=&#34;https://min-25.hatenablog.com/entry/2017/11/01/185400&#34;&gt;min_25&#39;s article&lt;/a&gt; with the help of Google Translate, and with a bit of modification.&lt;/p&gt;
&lt;p&gt;Our goal is to solve ${n \choose m} \pmod{p^e}$, ($n, m, p^e &amp;lt; 10^{300}$, $p$: prime number).&lt;/p&gt;
&lt;p&gt;The method differ from Andrew Granville&#39;s Binomial Coefficients modulo prime powers (&lt;a href=&#34;https://web.archive.org/web/20170202003812/http://www.dms.umontreal.ca/~andrew/PDF/BinCoeff.pdf&#34;&gt;BinCoeff.pdf&lt;/a&gt;).&lt;br&gt;
After precomputation, the number of operation to compute ${n \choose m} \pmod{p^e}$ is reduced from $O\left(e^2\left(\frac{\log n}{\log p} + \min(\log n, \log p)\right)\right)$ to $O(e \log n)$.&lt;/p&gt;
&lt;p&gt;For the rest of the article, denote ${n \brack m}$ as &lt;a href=&#34;https://en.wikipedia.org/wiki/Stirling_numbers_of_the_first_kind&#34;&gt;Stirling number of the first kind&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;computation-method&#34;&gt;Computation Method&lt;/h3&gt;
&lt;p&gt;Define $(n!)_p$ as the product of all positive integers $i \not\equiv 0 \pmod p$ for all $1 \leq i \leq n$. Our goal is to compute $(n!)_p \pmod {p^e}$.&lt;/p&gt;
&lt;p&gt;Let $n = up + v$ where $u, v$ non-negative integers and $0 \leq v &amp;lt; p$.&lt;/p&gt;
&lt;p&gt;For simplicity, we assume that $e &amp;lt; p$,&lt;/p&gt;
&lt;p&gt;$$
\begin{align*}
((up+v)!)_p &amp;amp;= \left( \prod_{i=0}^{u-1} \prod_{j=1}^{p-1} (ip+j) \right) \cdot \prod_{j=1}^v (up + j) \\\&lt;br&gt;
&amp;amp;\equiv \left(\prod_{i=0}^{u-1} \left( \sum_{k=0}^{e-1} (ip)^k {p \brack {k+1}}\right)\right) \cdot \left(\sum_{k=0}^{e-1}(up)^k {{v+1} \brack {k+1}}\right) \pmod {p^e} \\\&lt;br&gt;
&amp;amp;= {p \brack 1}^u \left(\prod_{i=0}^{u-1}\left( 1 + \sum_{k=1}^{e-1} \frac{{p \brack {k+1}}}{{p \brack 1}}(ip)^k \right) \right) \cdot \left( \sum_{k=0}^{e-1} (up)^k {{v+1} \brack {k+1}} \right) \\\&lt;br&gt;
&amp;amp;= {p \brack 1}^u f_{p,e}(u) \left( \sum_{k=0}^{e-1} (up)^k {{v+1} \brack {k+1}} \right)
\end{align*}
$$&lt;/p&gt;
&lt;p&gt;It can be shown that $f_{p, e}$ is a polynomial of degree $(2e - 2)$ (proven below). By calculating the value of $f_{p, e}(0), \ldots, f_{p, e}(2e-2)$, the value of $f_{p, e}(u)$ can be computed in $O(e \log n)$ using &lt;a href=&#34;https://en.wikipedia.org/wiki/Lagrange_polynomial&#34;&gt;Lagrange interpolation&lt;/a&gt; (in $O(e)$ if you precompute the modular inverses).&lt;/p&gt;
&lt;h4 id=&#34;implementation-and-time-complexity&#34;&gt;Implementation and Time Complexity&lt;/h4&gt;
&lt;p&gt;First, compute the &lt;a href=&#34;https://en.wikipedia.org/wiki/P-adic_order&#34;&gt;$p$-adic valuation&lt;/a&gt; of ${n \choose m}$. If it is not less than $e$, then the modulo is 0. Otherwise, we factor out all the $p$ factors in $n!, m!, (n-m)!$ then we compute the factorials, and multiply with the $p$ factors at the end of the ${n \choose m}$ computation below.&lt;/p&gt;
&lt;p&gt;After the 0 case handling, we do the steps as follow:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;${n \brack m} (1 \leq n \leq p, 1 \leq m \leq \min(p, e))$ is precomputed in $O(p \cdot \min(p, e))$&lt;/li&gt;
&lt;li&gt;$f_{p, e}(0), \ldots, f_{p, e}(2e-2)$ for interpolation are precomputed in $O(e \cdot \min(p, e) + e \log p)$&lt;/li&gt;
&lt;li&gt;Computation of $n!$ without the factor $p$ can be done by $\sum_{k=0}^\infty \left(\left\lfloor\frac{n}{p^k}\right\rfloor_p\right)!$ in $O(e \log n)$&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In total, there are around $O(pe + e^2 + e \log n)$ time complexity to compute ${n \choose m}$&lt;/p&gt;
&lt;h4 id=&#34;proof-that-fp-e-is-a-polynomial&#34;&gt;Proof that $f_{p, e}$ is a polynomial&lt;/h4&gt;
&lt;p&gt;For any $e, p$ $(e \geq 1, p \geq 2)$, let $a_k$ be a rational number that exists under modulo $p$. Let,&lt;/p&gt;
&lt;p&gt;$$ g(x, u) := \prod_{i=0}^{u-1} \left( 1 + \sum_{k=1}^{e-1} a_k (xi)^k \right) $$&lt;/p&gt;
&lt;p&gt;Let $b_k$ be some other rational number satisfying:&lt;/p&gt;
&lt;p&gt;$$
\begin{align*}
\log(g(x, u)) &amp;amp;= \sum_{i=0}^{u-1} \log\left( 1 + \sum_{k=1}^{e-1} a_k(xi)^k \right) \\\&lt;br&gt;
&amp;amp;= \sum_{i=0}^{u-1} \sum_{k=0}^\infty b_k x^k i^k \\\&lt;br&gt;
&amp;amp;= \sum_{k=1}^\infty b_k x^k s_k(u)
\end{align*}
$$&lt;/p&gt;
&lt;p&gt;where $s_k(x) = \sum_{i=0}^x i^k$ is a polynomial of degree $k+1$. Continuing from above,&lt;/p&gt;
&lt;p&gt;$$
\begin{align*}
g(x, u) &amp;amp;= \exp\left( \sum_{k=1}^\infty b_k x^k s_k(u) \right) \\\&lt;br&gt;
&amp;amp;= 1 + \sum_{k=1}^\infty t_k(u) x^k
\end{align*}
$$&lt;/p&gt;
&lt;p&gt;where $t_k(u)$ is a polynomial of degree $2k$, because the highest polynomial degree obtained at $x^k$ is from $(b_1 x s_1(u))^k$. The coefficients of $t_k(u)$ are also rational number which exists under modulo $p$.&lt;/p&gt;
&lt;p&gt;Substituting $x = p$ gives us the polynomial of $f_{p, e}(u)$:&lt;/p&gt;
&lt;p&gt;$$ g(p, u) \equiv 1 + \sum_{k=1}^{e-1} t_k(u) \cdot p^k \pmod{p^e} $$&lt;/p&gt;
&lt;p&gt;Therefore, $f_{p, e}(x)$ is a polynomial of degree $(2e - 2)$.&lt;/p&gt;
&lt;h3 id=&#34;remark&#34;&gt;Remark&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;If $p$ is prime, ${p \brack i}$ $(2 \leq i &amp;lt; p)$ is divisible by $p$.&lt;/li&gt;
&lt;li&gt;If $p \geq 5$, ${p \brack 2}$ is divisible by $p^2$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Using these properties, looks like it is possible to further reduce the degree of $f_{p, e}(x)$.&lt;/p&gt;
&lt;h3 id=&#34;source-codes&#34;&gt;Source Codes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;min_25&#39;s implementation using &lt;a href=&#34;https://gist.github.com/min-25/a5496354e10064a581d6b0c52c727a26&#34;&gt;Python&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;My implementation using &lt;a href=&#34;https://github.com/prabowo02/CP/blob/master/binomial_mod_pe.cpp&#34;&gt;C++&lt;/a&gt; (but it is not using big integer, only &lt;code&gt;__int128&lt;/code&gt;, so it can only support for $n$ up to $10^{18}$).&lt;/li&gt;
&lt;/ul&gt;
</description>
		</item>
		<item>
			<title>Project Euler #242</title>
			<link>https://prabowo02.github.io/posts/project-euler-242/</link>
			<pubDate>Fri, 29 Nov 2019 12:15:14 +0800</pubDate>
			<guid isPermaLink="true">https://prabowo02.github.io/posts/project-euler-242/</guid>
			<description>&lt;p&gt;This post will give the analysis to &lt;a href=&#34;https://www.hackerrank.com/contests/projecteuler/challenges/euler242/problem&#34;&gt;Project Euler #242&lt;/a&gt; from hackerrank, which is an extended version from the &lt;a href=&#34;https://projecteuler.net/problem=242&#34;&gt;original&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;problem-statement&#34;&gt;Problem Statement&lt;/h3&gt;
&lt;p&gt;Given 5 integers $m$, $r$, $n$, $k$, and $M$, count the number of k-subsets of $\{1, 2, \ldots, n\}$ such that the sum of the subset is $r \pmod m$. Let the answer be $S$, output $S \times m$ modulo $M$.&lt;/p&gt;
&lt;h4 id=&#34;constraints&#34;&gt;Constraints&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;$2 \leq m \leq 10^{11}$&lt;/li&gt;
&lt;li&gt;$0 \leq r \leq m$&lt;/li&gt;
&lt;li&gt;$1 \leq k \leq n \leq 10^{18}$&lt;/li&gt;
&lt;li&gt;For each positive divisor $d$ of $m$: $n \mod d \leq k \mod d$&lt;/li&gt;
&lt;li&gt;$2 \leq M \leq 2^{62}$&lt;/li&gt;
&lt;li&gt;The largest prime factor of $M$ is less than $10^5$&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;solution&#34;&gt;Solution&lt;/h3&gt;
&lt;p&gt;This is actually an extended version of &lt;a href=&#34;https://www.imo-official.org/year_info.aspx?year=1995&#34;&gt;IMO 1995 P6&lt;/a&gt; (having $m = p$, $n = 2p$, $k = p$, $r = 0$). A discussion to this problem can be found in &lt;a href=&#34;https://artofproblemsolving.com/community/c6h15112p107230&#34;&gt;AOPS&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Back to the original problem, consider the generating function $(1 + xy)(1 + xy^2) \ldots (1 + xy^n)$. Our answer will be the sum of coefficients of $x^k y^r, x^k y^{r+m}, x^k y^{r+2m}, \ldots$.&lt;/p&gt;
&lt;p&gt;To get this sum, we use the &lt;a href=&#34;https://en.wikipedia.org/wiki/Series_multisection&#34;&gt;Series Multisection&lt;/a&gt; formula on the y coefficients, then our generating function become:&lt;/p&gt;
&lt;p&gt;$$\frac{1}{m} \sum_{l=0}^{m-1} \left( \omega^{-lr} \prod_{i=1}^n (1 + x\omega^{li}) \right)$$&lt;/p&gt;
&lt;p&gt;where $\omega$ is the primitive $m$-th root of unity. Since the final answer will be multiplied by $m$, the $\frac{1}{m}$ will be ignored for the rest of this post. Now our goal is to find the coefficient of $x^k$ from that equation.&lt;/p&gt;
&lt;p&gt;Using the &lt;a href=&#34;http://mathworld.wolfram.com/CauchyBinomialTheorem.html&#34;&gt;Cauchy Binomial Theorem&lt;/a&gt;, we convert our equation above to:&lt;/p&gt;
&lt;p&gt;$$\sum_{l=0}^{m-1} \left( \omega^{-lr} \sum_{i=0}^n x^i \omega^{li(i+1)/2} {n \brack i}_{\omega^l} \right)$$&lt;/p&gt;
&lt;p&gt;Since we only care with the $x^k$ coefficient, then the answer to our original problem is the evaluation of:&lt;/p&gt;
&lt;p&gt;$$ \sum_{i=0}^{m-1} \left( (\omega^{i})^{k(k+1)/2 - r} {n \brack k}_{\omega^i} \right) $$&lt;/p&gt;
&lt;p&gt;We will compute the sum for each primitive of $\omega^i$ separately. Denote $\omega_d$ as the primitive $d$-th root of unity. Also note the &lt;a href=&#34;https://www.math.upenn.edu/~peal/polynomials/q-analogues.htm#prelimQanaloguesQLucas&#34;&gt;q-Lucas theorem&lt;/a&gt;: ${n \brack k}_{\omega_d} = {\lfloor n/d \rfloor \choose \lfloor k/d \rfloor } {n \mod d \brack k \mod d}_{\omega_d}$.&lt;br&gt;
Since $n \mod d \leq k \mod d$, the value of ${n \mod d \brack k \mod d} = 1$ if $n \equiv k \pmod d$, $0$ otherwise.&lt;br&gt;
With these in mind, we rewrite our equation to:&lt;/p&gt;
&lt;p&gt;$$ \sum_{d|m} \left( \sum_{(d, i) = 1}^d (\omega_d^i)^{k(k+1)/2 - r}  {n \choose k}[n \equiv k \pmod d] \right) $$&lt;/p&gt;
&lt;p&gt;where $[]$ is the &lt;a href=&#34;https://en.wikipedia.org/wiki/Iverson_bracket&#34;&gt;Iverson bracket&lt;/a&gt;. Recall that the sum of $k$-th power of the $d$-th root of unity is $\frac{\mu(d / \gcd(k, d)) \varphi(d)}{\varphi(d / \gcd(k, d))}$, where $\mu$ is the &lt;a href=&#34;https://en.wikipedia.org/wiki/M%C3%B6bius_function&#34;&gt;Möbius function&lt;/a&gt; and $\varphi$ is the &lt;a href=&#34;https://en.wikipedia.org/wiki/Euler%27s_totient_function&#34;&gt;Euler&#39;s Totient function&lt;/a&gt;.&lt;br&gt;
Therefore, our final answer is:&lt;/p&gt;
&lt;p&gt;$$ \sum_{d|m} \left( \frac{\mu\left(\frac{d}{\gcd(k(k+1)/2 - r, d)}\right) \varphi(d)}{\varphi\left(\frac{d}{\gcd(k(k+1)/2 - r, d)}\right)} {n \choose k}[n \equiv k \pmod d] \right) $$&lt;/p&gt;
&lt;p&gt;And now, for the computational part. Compute the final sum for every prime factor of $M$, then combine the answers using &lt;a href=&#34;https://en.wikipedia.org/wiki/Chinese_remainder_theorem&#34;&gt;Chinese Remainder Theorem&lt;/a&gt;. The computation of binomial theorem modulo $p^e$ can be computed in $O(e(p + e + \log n))$, which is described in this &lt;a href=&#34;https://prabowo02.github.io/posts/binomial-mod-pe&#34;&gt;post&lt;/a&gt;.&lt;br&gt;
The computation of the divisors of $m$ and all its mobius and euler totient values can be computed in $O(\sqrt m)$&lt;/p&gt;
&lt;p&gt;Therefore, the overall complexity is $O(\sqrt m + \log M \log n)$.&lt;/p&gt;
</description>
		</item>
		<item>
			<title>About</title>
			<link>https://prabowo02.github.io/about/</link>
			<pubDate>Fri, 29 Nov 2019 12:08:03 +0800</pubDate>
			<guid isPermaLink="true">https://prabowo02.github.io/about/</guid>
			<description>&lt;p&gt;The real name is Prabowo Djonatan.&lt;br&gt;
I usually go by the username prabowo on several online judges:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://codeforces.com/profile/Prabowo&#34;&gt;Codeforces&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atcoder.jp/users/prabowo&#34;&gt;AtCoder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.hackerrank.com/Prabowo&#34;&gt;Hackerrank&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://open.kattis.com/users/prabowo&#34;&gt;Kattis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tlx.toki.id/profiles/prabowo&#34;&gt;TLX&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;About the content of this blog, I will mostly talk about algorithms.&lt;/p&gt;
</description>
		</item>
	</channel>
</rss>
